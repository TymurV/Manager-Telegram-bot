from telebot import TeleBot
from config import *
from keyboards import *
from database import *
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton


bot = TeleBot(TOKEN)
support_chat_id = chat_id

init_db()

@bot.message_handler(commands=['start'])
def send_welcome(message):
    chat_id = message.chat.id
    telegram_id = message.from_user.id
    username = message.from_user.username or ""
    save_user(telegram_id, username)
    bot.send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=get_main_menu())

@bot.message_handler(commands=['about'])
def about_project(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ —Ä–∞–∑–≤–∏—Ç–∏—è –≤ —Å—Ñ–µ—Ä–µ IT. –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä –∫—É—Ä—Å–æ–≤ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –æ—Å–≤–æ–∏—Ç—å –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ –¥–æ—Å—Ç–∏—á—å —É—Å–ø–µ—Ö–∞ –≤ IT-—Å—Ñ–µ—Ä–µ.")

@bot.message_handler(commands=['help'])
def help_command(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.")

@bot.message_handler(content_types=['text'])
def handle_text(message):
    chat_id = message.chat.id
    text = message.text

    if text == "–ö—É—Ä—Å—ã":
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_categories_menu())
    elif text == "–ê–∫—Ü–∏—è!":
        bot.send_message(chat_id, "–ê–∫—Ü–∏—è! –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –º–∏–Ω–∏ –∫—É—Ä—Å Python/Java!", reply_markup=get_action_menu())
    elif text == "–û –Ω–∞—Å":
        bot.send_message(chat_id, "–ú—ã - –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Å–≤–æ–∏—Ç—å –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ –¥–æ—Å—Ç–∏—á—å —É—Å–ø–µ—Ö–∞ –≤ IT-—Å—Ñ–µ—Ä–µ.")
    elif text == "–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏":
        bot.send_message(chat_id, "üëã –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:")
        bot.register_next_step_handler(message, confirm_support_message)
    else:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.", reply_markup=get_main_menu())

def confirm_support_message(message):
    chat_id = message.chat.id
    user_data = message.text
    bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É?\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ", reply_markup=send_message_to_support())
    bot.register_next_step_handler(message, lambda msg: handle_support_message(msg, user_data))

def handle_support_message(message, original_question):
    chat_id = message.chat.id
    text = message.text

    if text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å ‚úÖ":
        user = message.from_user
        user_info = (
            f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"üë§ –ò–º—è: {user.first_name or ''} {user.last_name or ''}\n"
            f"üßë‚Äçüíª Username: @{user.username if user.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üÜî ID: {user.id}\n\n"
            f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ:\n{original_question}"
        )
        
        # Create reply button
        reply_markup = InlineKeyboardMarkup()
        reply_markup.add(InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"reply_{user.id}"))
        
        bot.send_message(support_chat_id, user_info, reply_markup=reply_markup)
        bot.send_message(chat_id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.", reply_markup=get_main_menu())
    elif text == "–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå":
        bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_menu())
    else:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å ‚úÖ' –∏–ª–∏ '–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå'.", reply_markup=send_message_to_support())
        bot.register_next_step_handler(message, lambda msg: handle_support_message(msg, original_question))

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    chat_id = call.message.chat.id
    callback_data = call.data

    try:
        if callback_data.startswith("reply_"):
            user_id = int(callback_data.split("_")[1])
            bot.send_message(chat_id, f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {user_id}):")
            bot.register_next_step_handler(call.message, lambda msg: send_reply_to_user(msg, user_id))
            bot.answer_callback_query(call.id)
            return
            
        if callback_data.startswith("category_"):
            category_id = int(callback_data.split("_")[1])
            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", reply_markup=get_products_menu(category_id))
            bot.delete_message(chat_id, call.message.message_id)

        elif callback_data.startswith("product_"):
            product_id = int(callback_data.split("_")[1])
            product = get_product(product_id)
            if product:
                name, description, recomended_age, image_path = product
                caption = f"{name}\n\n{description}\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {recomended_age}"
                try:
                    with open(image_path, "rb") as photo:
                        bot.send_photo(chat_id, photo, caption=caption, reply_markup=buy_course_button(product_id))
                        bot.delete_message(chat_id, call.message.message_id)
                except FileNotFoundError:
                    bot.send_message(chat_id, f"{caption}\n\n–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.", reply_markup=buy_course_button(product_id))
                    bot.delete_message(chat_id, call.message.message_id)
            else:
                bot.send_message(chat_id, "–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu())

        elif callback_data == "back_to_main_menu":
            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=get_main_menu())
            bot.delete_message(chat_id, call.message.message_id)

        bot.answer_callback_query(call.id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ callback_query: {e}")
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_main_menu())
        bot.answer_callback_query(call.id)

def send_reply_to_user(message, user_id):
    admin_reply = message.text
    
    try:
        bot.send_message(user_id, f"üì¨ –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{admin_reply}")
        bot.send_message(message.chat.id, f"‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_id})")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

if __name__ == "__main__":
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        import time
        time.sleep(5)
